namespace Popeye
{
	const char* fragmentShader = "#version 330 core\n"
		"out vec4 FragColor;"
		"layout (location = 1) in vec3 aNormal;\n"
		"layout (location = 2) in vec2 aTexCoord;\n"
		"\n"
		"struct Material{\n"
		"bool text;\n"
		"sampler2D texture;\n"
		"vec3 ambient;\n"
		"vec3 diffuse;\n"
		"vec3 diffuse;\n"
		"vec3 specular;\n"
		"float shininess;\n"
		"};\n"
		"\n"
		"struct PointLight{\n"
		"vec3 position; \n"
		"float constant; \n"
		"float linear; \n"
		"float quadratic; \n"
		"\n"
		"vec3 ambient; \n"
		"vec3 diffuse; \n"
		"vec3 specular; \n"
		"}; \n"
		"\n"
		"struct DirLight {\n"
		"vec3 direction; \n"
		"\n"
		"float constant; \n"
		"float linear; \n"
		"float quadratic; \n"
		"\n"
		"vec3 ambient; \n"
		"vec3 diffuse; \n"
		"vec3 specular; \n"
		"}; \n"
		"struct SpotLight {\n"
		"vec3 position; \n"
		"vec3 direction; \n"
		"float cutOff; \n"
		"float outerCutOff; \n"
		"\n"
		"float constant; \n"
		"float linear; \n"
		"float quadratic; \n"
		"\n"
		"vec3 ambient; \n"
		"vec3 diffuse; \n"
		"vec3 specular; \n"
		"}; \n"
		"\n"
		"in vec3 Normal; \n"
		"in vec3 FragPos; \n"
		"in vec2 TexCoord; \n"
		"\n"
		"uniform int pointlightCount; \n"
		"uniform int dirlightCount; \n"
		"uniform int spotlightCount; \n"
		"\n"
		"uniform PointLight pointLights[10]; \n"
		"uniform DirLight dirLights[10]; \n"
		"uniform SpotLight spotLights[10]; \n"
		"\n"
		"uniform vec3 ViewPos; \n"
		"uniform Material material; \n"
		"\n"
		"vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir); \n"
		"vec3 CalcPointLight(PointLight light, vec3 normal, vec3 viewDir); \n"
		"vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 viewDir); \n"
		"\n"
		"void main()\n"
		"{\n"
		"vec3 result = vec3(0.0); \n"
		"\n"
		"vec3 norm = normalize(Normal); \n"
		"vec3 viewDir = normalize(ViewPos - FragPos); \n"
		"\n"
		"for (int i = 0; i < dirlightCount; i++)\n"
		"result += CalcDirLight(dirLights[i], norm, viewDir); \n"
		"\n"
		"for (int i = 0; i < pointlightCount; i++)\n"
		"result += CalcPointLight(pointLights[i], norm, viewDir); \n"
		"\n"
		"for (int i = 0; i < spotlightCount; i++)\n"
		"result += CalcSpotLight(spotLights[i], norm, viewDir); \n"
		"\n"
		"if (material.text)\n"
		"result *= vec3(texture(material.texture, TexCoord)); \n"
		"\n"
		"FragColor = vec4(result, 1.0); \n"
		"}\n"

		"vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)\n"
		"{\n"
		"vec3 lightDir = normalize(-light.direction); \n"
		"vec3 reflectDir = reflect(-lightDir, normal); \n"
		"float diff = max(dot(normal, lightDir), 0.0); \n"
		"float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess); \n"
		"\n"
		"float distance = 2.0; \n"
		"float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance)); \n"
		"\n"
		"vec3 ambient = light.ambient * material.ambient * material.diffuse; \n"
		"vec3 diffuse = light.diffuse * diff * material.diffuse; \n"
		"vec3 specular = light.specular * spec * material.specular; \n"
		"\n"
		"return ambient + (diffuse + specular) * attenuation; \n"
		"}\n"
		"\n"
		"vec3 CalcPointLight(PointLight light, vec3 normal, vec3 viewDir)\n"
		"{\n"
		"vec3 lightDir = normalize(light.position - FragPos); \n"
		"vec3 reflectDir = reflect(-lightDir, normal); \n"
		"float diff = max(dot(normal, lightDir), 0.0); \n"
		"float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess); \n"
		"\n"
		"float distance = length(light.position - FragPos); \n"
		"float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance)); \n"
		"\n"
		"vec3 ambient = light.ambient * material.ambient * material.diffuse; \n"
		"vec3 diffuse = light.diffuse * diff * material.diffuse; \n"
		"vec3 specular = light.specular * spec * material.specular; \n"
		"\n"


		"return ambient + (diffuse + specular) * attenuation;\n"
		"}\n"
		"\n"
		"vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 viewDir)\n"
		"{\n"
		"vec3 lightDir = normalize(light.position - FragPos);\n"
		"vec3 reflectDir = reflect(-lightDir, normal); \n"
		"float diff = max(dot(normal, lightDir), 0.0); \n"
		"float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);\n"

		"float distance = length(light.position - FragPos); \n"
		"float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));\n"

		"float theta = dot(lightDir, normalize(-light.direction));\n"
		"float epsilon = light.cutOff - light.outerCutOff;\n"
		"float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0); \n"

		"vec3 ambient = light.ambient * material.ambient * material.diffuse; \n"
		"vec3 diffuse = light.diffuse * diff * material.diffuse;\n"
		"vec3 specular = light.specular * spec * material.specular;\n"

		"return (ambient + (diffuse + specular) * attenuation) * intensity; \n"
		"}\n";

		const char* vertexShader = "#version 330 core\n"
			 "layout (location = 0) in vec3 aPos;\n"
			 "layout (location = 1) in vec3 aNormal;\n"
			 "layout (location = 2) in vec2 aTexCoord;\n"
			 "\n"
			 "out vec3 FragPos;\n"
			 "out vec3 Normal;\n"
			 "out vec2 TexCoord;\n"
			 "\n"
			 "uniform mat4 model;\n"
			 "uniform mat4 view;\n"
			 "uniform mat4 projection;\n"
			 "\n"
			 "void main()\n"
			 "{\n"
			 "	FragPos	= vec3(model * vec4(aPos, 1.0));\n"
			 "	Normal	= normalize(vec3(model * vec4(aNormal, 1.0)));\n"
			 "	TexCoord= aTexCoord;\n"
			 "\n"
			 "	gl_Position = projection * view * model * vec4(aPos, 1.0);\n"
			 "}\n"
			 "\n";
		
		const char* gizmovertShder = "#version 330 core\n"
		"	layout(location = 0) in vec3 aPos; \n"

		"uniform mat4 view; \n"
		"uniform mat4 proj; \n"
		"uniform mat4 model; \n"
		"	\n"
		"void main()\n"
		"{\n"
		"	gl_Position = proj * view * model * vec4(aPos, 1.0); \n"
		"}\n";

		const char* gizmofragShder = "#version 330 core\n"
		"	out vec4 FragColor; \n"
		"void main()\n"
		"{\n"
		"	FragColor = vec4(1.0, 1.0, 1.0, 1.0); \n"
		"}\n";


		const char* screenvertShder = "#version 330 core\n"
			"layout (location = 0) in vec2 aPos;\n"
			"layout(location = 1) in vec2 aTexCoords; \n"

			"out vec2 TexCoords; \n"
			"	\n"
			"void main()\n"
			"{\n"
			"	TexCoords = aTexCoords; \n"
			"	gl_Position = vec4(aPos.x, aPos.y, 0.0, 1.0);  \n"
			"}\n";

		const char* screenfragShder = "#version 330 core\n"
			"out vec4 FragColor;\n"
			"in vec2 TexCoords;\n"
			"uniform sampler2D screenTexture;\n"
			"void main()\n"
			"{\n"
			"    vec3 col = texture(screenTexture, TexCoords).rgb; \n"
			"    FragColor = vec4(col, 1.0); \n"
			"}\n";
}